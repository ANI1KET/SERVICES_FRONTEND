// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  OWNER
  BROKER
}

enum Permission {
  room
  hostel
  promote
  vehicle
  property
  reMarketItem
}

model Subscription {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  permissions Json   @default("{}")

  // RELATIONSHIP
  userId String @unique @db.ObjectId
  user   User   @relation(name: "Subscriber", fields: [userId], references: [id], onDelete: Cascade)

  // TIMESTAMPS
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("Subscriptions")
}

model InterestedRooms {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  listerId String @db.ObjectId

  // RELATIONSHIP
  roomId       String                 @unique @db.ObjectId
  room         Room                   @relation(fields: [roomId], references: [id], name: "RoomInterested", onDelete: Cascade)
  // RELATIONSHIP
  interestedBy InterestedRoomsUsers[] @relation("InterestedRooms")

  @@index([listerId])
}

model InterestedRoomsUsers {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // RELATIONSHIP
  user             User            @relation(name: "InterestedUsers", fields: [userId], references: [id], onDelete: Cascade)
  userId           String          @db.ObjectId
  // RELATIONSHIP
  interestedRoom   InterestedRooms @relation(name: "InterestedRooms", fields: [interestedRoomId], references: [id], onDelete: Cascade)
  interestedRoomId String          @db.ObjectId

  // TIMESTAMPS
  createdAt DateTime @default(now())

  @@unique([userId, interestedRoomId])
  @@index([userId])
  @@index([interestedRoomId])
}

model Promoter {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // RELATIONSHIP
  user           User                 @relation(fields: [userId], references: [id], name: "MyDetails", onDelete: Cascade)
  userId         String               @unique @db.ObjectId
  // RELATIONSHIP
  promotionDeals PromotionAgreement[] @relation("PromoterAgreements")
}

model PromotionAgreement {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // RELATIONSHIP
  promoter   Promoter        @relation("PromoterAgreements", fields: [promoterId], references: [id], onDelete: Cascade)
  promoterId String          @db.ObjectId
  // RELATIONSHIP
  lister     User            @relation("ListerAgreements", fields: [listerId], references: [id], onDelete: Cascade)
  listerId   String          @db.ObjectId
  // RELATIONSHIP
  promotions RoomPromotion[] @relation("PromotionRooms")

  @@unique([promoterId, listerId])
}

model RoomPromotion {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  originalUrl   String
  shortUrl      String @unique
  pricePerClick Float
  totalPrice    Float  @default(0)
  clicks        Int    @default(0)

  // RELATIONSHIPS
  agreement   PromotionAgreement @relation(name: "PromotionRooms", fields: [agreementId], references: [id], onDelete: Cascade)
  agreementId String             @db.ObjectId
  // RELATIONSHIPS
  room        Room               @relation(name: "PromotedRooms", fields: [roomId], references: [id], onDelete: Cascade)
  roomId      String             @db.ObjectId
  // RELATIONSHIPS
  clickEvents UserClick[]        @relation("UsersClick")

  // TIMESTAMPS
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model UserClick {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  ip         String
  deviceType String

  // RELATIONSHIP
  roomPromotion   RoomPromotion @relation(name: "UsersClick", fields: [roomPromotionId], references: [id], onDelete: Cascade)
  roomPromotionId String        @db.ObjectId

  // TIMESTAMPS
  timestamp DateTime @default(now())

  @@index([roomPromotionId])
  @@index([timestamp])
  @@map("ClickEvents")
}

model User {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String  @unique
  image            String?
  number           String?
  password         String?
  toPromote        Boolean @default(false)
  promoteRoomPrice Int?

  // ENUM
  role       Role         @default(ADMIN)
  permission Permission[] @default([])

  // RELATIONSHIP
  subscription    Subscription?          @relation(name: "Subscriber")
  // RELATIONSHIP
  promoter        Promoter?              @relation("MyDetails")
  // RELATIONSHIP
  promotionDeals  PromotionAgreement[]   @relation("ListerAgreements")
  // RELATIONSHIP
  rooms           Room[]                 @relation("UserRooms")
  roomReviews     RoomReview[]           @relation("UserRoomReviews")
  // RELATIONSHIP
  hostels         Hostel[]               @relation("UserHostels")
  hostelReviews   HostelReview[]         @relation("UserHostelReviews")
  // RELATIONSHIP
  properties      Property[]             @relation("UserPorperties")
  // RELATIONSHIP
  vehicles        Vehicle[]              @relation("UserVehicles")
  // RELATIONSHIP
  reMarketItems   ReMarketItem[]         @relation("UserReMarketItems")
  // RELATIONSHIP
  interestedRooms InterestedRoomsUsers[] @relation("InterestedUsers")

  // TIMESTAMPS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role])
  @@index([permission])
  @@index([role, permission])
  @@map("Users")
}

enum FurnishingStatusEnum {
  FURNISHED
  UNFURNISHED
  SEMIFURNISHED
}

model Room {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  hall           Int
  kitchen        Int
  bedroom        Int
  bathroom       Int
  mincapacity    Int
  maxcapacity    Int
  price          Float
  ratings        Float    @default(0)
  name           String
  city           String
  location       String
  roomtype       String
  ownerContact   String
  primaryContact String
  available      Boolean  @default(true)
  verified       Boolean  @default(false)
  isActive       Boolean  @default(true)
  direction      String?
  videos         String?
  photos         String[]
  amenities      String[] @default([])

  // ENUM
  postedBy         Role                 @default(ADMIN)
  furnishingStatus FurnishingStatusEnum

  // RELATIONSHIP
  reviews        RoomReview[]     @relation("RoomReviews")
  // RELATIONSHIP
  lister         User             @relation(fields: [listerId], references: [id], name: "UserRooms", onDelete: Cascade)
  listerId       String           @db.ObjectId
  // RELATIONSHIP
  interestedRoom InterestedRooms? @relation(name: "RoomInterested")
  // RELATIONSHIP
  roomPromotions RoomPromotion[]  @relation("PromotedRooms")

  // TIMESTAMPS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([city])
  @@index([listerId])
  @@index([isActive])
  @@map("Rooms")
}

model RoomReview {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  rating  Float
  comment String

  // RELATIONSHIP 
  user   User   @relation(fields: [userId], references: [id], name: "UserRoomReviews", onDelete: Cascade)
  userId String @db.ObjectId
  // RELATIONSHIP 
  room   Room   @relation(fields: [roomId], references: [id], name: "RoomReviews", onDelete: Cascade)
  roomId String @db.ObjectId

  // TIMESTAMPS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("Room_Reviews")
}

model Hostel {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  city             String
  location         String
  contact          String
  hostelType       String // "PG", "Dormitory", "Shared", "Private", "Boys PG", "Girls PG"
  availableFor     Int      @default(0)
  availableRooms   Int      @default(0)
  price            Float
  ratings          Float    @default(0.0) // Average rating from reviews
  deposit          Float? // Security deposit amount
  direction        String?
  videos           String?
  amenities        String[] // WiFi, AC, Geyser, etc.
  roomTypes        String[] // "Single", "Double", "Triple Sharing"
  services         String[] // Laundry, housekeeping, food, etc.
  securityFeatures String[] // CCTV, biometric access, security guard
  nearbyFacilities String[] // Hospitals, markets, transport, gym, etc.
  images           String[]
  isActive         Boolean  @default(true)

  // ENUM
  postedBy Role @default(ADMIN)

  // RELATIONSHIP
  reviews  HostelReview[] @relation("HostelReviews")
  // RELATIONSHIP
  lister   User           @relation(fields: [listerId], references: [id], name: "UserHostels", onDelete: Cascade)
  listerId String         @db.ObjectId

  // TIMESTAMPS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Hostels")
}

model HostelReview {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  rating  Float
  comment String

  // RELATIONSHIP
  user     User   @relation(fields: [userId], references: [id], name: "UserHostelReviews", onDelete: Cascade)
  userId   String @db.ObjectId
  // RELATIONSHIP 
  hostel   Hostel @relation(fields: [hostelId], references: [id], name: "HostelReviews", onDelete: Cascade)
  hostelId String @db.ObjectId

  // TIMESTAMPS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  // @@index([roomId])
  @@map("Hostel_Reviews")
}

model Property {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  city         String
  location     String
  direction    String?
  propertyType String // "Apartment", "House", "Land", "Commercial"
  listingType  String // "Sale", "Rent"
  area         Float? // Size in square meters or feet
  bedrooms     Int? // Optional for land
  bathrooms    Int? // Optional for land
  furnished    Boolean?
  amenities    String[] // Parking, Lift, Security, etc. (optional for land)
  price        Float
  videos       String?
  images       String[]
  isActive     Boolean  @default(true)

  // ENUM
  postedBy Role @default(ADMIN)

  // RELATIONSHIP 
  seller   User   @relation(fields: [sellerId], references: [id], name: "UserPorperties", onDelete: Cascade)
  sellerId String @db.ObjectId

  // TIMESTAMPS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Properties")
}

enum Transmission {
  Manual
  Automatic
}

model Vehicle {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  model           String
  numberPlate     String   @unique
  color           String?
  year            Int?
  mileage         Float?
  fuelType        String?
  seatingCapacity Int?
  price           Float?
  videos          String?
  images          String[]
  condition       String?
  available       Boolean  @default(true)
  isActive        Boolean  @default(true)

  // ENUM
  postedBy     Role         @default(ADMIN)
  transmission Transmission

  // RELATIONSHIP 
  seller   User   @relation(fields: [sellerId], references: [id], name: "UserVehicles", onDelete: Cascade)
  sellerId String @db.ObjectId

  // TIMESTAMPS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Vehicles")
}

model ReMarketItem {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  category       String // "Electronics", "Furniture", "Clothing", "Vehicles", etc.
  subCategory    String? // More specific type like "Laptop", "Smartphone", etc.
  condition      String // "New", "Used", "Refurbished", "Like New"
  price          Float
  isNegotiable   Boolean
  city           String
  location       String // City/Area where the item is listed
  ageInMonths    Int? // How old the item is (for Used/Refurbished items)
  quantity       Int
  warrantyPeriod Int? // Warranty duration in months (if available)
  postedBy       Role     @default(ADMIN)
  videos         String?
  images         String[]
  isActive       Boolean  @default(true)
  available      Boolean  @default(true)

  // RELATIONSHIP 
  seller   User   @relation(fields: [sellerId], references: [id], name: "UserReMarketItems", onDelete: Cascade)
  sellerId String @db.ObjectId

  // TIMESTAMPS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ReMarketItems")
}
